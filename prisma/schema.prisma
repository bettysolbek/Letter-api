// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String       @id @default(cuid()) @map("_id")
  username   String       @unique
  password   String
  roleId     Int
  role       Role         @relation(fields: [roleId], references: [id])
  sentLetters Letter[]     @relation("SentLetters")
  receivedLetters Letter[] @relation("ReceivedLetters")
  approvedLetters Letter[] @relation("ApprovedLetters")
  activityLogs ActivityLog[]
}

model Letter {
  id       Int      @id @default(autoincrement()) @map("_id")  // Ensure this is Int
  senderId   String
  recipientId String
  approvedById String?
  subject    String
  content    String
  status     String      @default("pending")
  sender     User         @relation("SentLetters", fields: [senderId], references: [id])
  recipient  User         @relation("ReceivedLetters", fields: [recipientId], references: [id])
  approvedBy User?        @relation("ApprovedLetters", fields: [approvedById], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  activityLogs ActivityLog[] @relation("LetterActivityLogs")
  attachments Attachment[]
}

model Attachment {
  id        Int      @id @default(autoincrement())
  letter    Letter   @relation(fields: [letterId], references: [id])
  letterId  Int
  filename  String
  contentType String
  content   Bytes
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    String
  action    String
  createdAt DateTime @default(now())
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  letter    Letter?   @relation("LetterActivityLogs", fields: [letterId], references: [id])
  letterId Int?
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  isAdmin   Boolean  @default(false)
  permissions Permission[]
  users     User[]
  activityLogs ActivityLog[]
}

model Permission {
  id        Int    @id @default(autoincrement())
  name      String
  description String?
  roles     Role[]
}

enum LetterStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}